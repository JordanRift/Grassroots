@model JordanRift.Grassroots.Framework.Entities.Payment
@using JordanRift.Grassroots.Framework.Entities.Models
@{
    //
    // Copyright © 2011 Jordan Rift, LLC - All Rights Reserved
    //
    // THIS WORK IS LICENSED UNDER A CREATIVE COMMONS ATTRIBUTION-NONCOMMERCIAL-
    // SHAREALIKE 3.0 UNPORTED LICENSE:
    // http://creativecommons.org/licenses/by-nc-sa/3.0/
    //
    
	ViewBag.Title = "Donate"; <!-- TODO: Add title with organization name -->
}

@section DocumentHead 
{
    @Html.Partial("UIForm")
    <script type="text/javascript">
        $(function () {
            Grassroots.initPayment();
        });
	</script>
}

@{ 
	var campaign = ViewBag.Campaign as Campaign;
	var urlSlug = campaign != null ? campaign.UrlSlug : string.Empty;
    var title = campaign != null ? campaign.Title : "our general fund";
}

<hgroup>
    <h1>Make a Donation</h1>
    <h3>This donation will be applied toward @title.</h3>
</hgroup>
 
 <!-- TODO: Consider adding progress bar here... -->

<div class="donate-form">
	@using (Html.BeginForm("ProcessDonation", "Donate", new { Area = "", slug = urlSlug })) {
		@Html.ValidationSummary(false, "Unable to process your payment. Please correct the following errors and try again.", new { @class = "ui-widget ui-state-error ui-corner-all" })
		<fieldset class="column">
            <legend>Payment Information</legend>
			<dl>
				<dt>@Html.LabelFor(model => model.Amount)</dt>
				<dd>
					@Html.TextBoxFor(model => model.Amount) 
					@Html.ValidationMessageFor(model => model.Amount, null, new { @class = "ui-state-error ui-corner-all" }) 
				</dd>

				<dt>@Html.LabelFor(model => model.PaymentType)</dt>
				<dd>
					@Html.EditorFor(model => model.PaymentType)
					@Html.ValidationMessageFor(model => model.PaymentType, null, new { @class = "ui-state-error ui-corner-all payment-type" })
				</dd>
			
				<dt>@Html.LabelFor(model => model.AccountNumber)</dt>
				<dd>
					@Html.TextBoxFor(model => model.AccountNumber) 
					@Html.ValidationMessageFor(model => model.AccountNumber, null, new { @class = "ui-state-error ui-corner-all" }) 
				</dd>
            </dl>
            <dl class="cc-info">
				<dt>@Html.LabelFor(model => model.Expiration)</dt>
				<dd>
					@Html.EditorFor(model => model.Expiration) 
					@Html.ValidationMessageFor(model => model.Expiration, null, new { @class = "ui-state-error ui-corner-all" }) 
				</dd>
				<dt>@Html.LabelFor(model => model.Cid)</dt>
				<dd>
					@Html.TextBoxFor(model => model.Cid) 
					@Html.ValidationMessageFor(model => model.Cid, null, new { @class = "ui-state-error ui-corner-all" }) 
				</dd>
			</dl>
			<dl class="bank-info">
				<dt>@Html.LabelFor(model => model.RoutingNumber)</dt>
				<dd>
					@Html.TextBoxFor(model => model.RoutingNumber) 
					@Html.ValidationMessageFor(model => model.RoutingNumber, null, new { @class = "ui-state-error ui-corner-all" }) 
				</dd>
				<dt>@Html.LabelFor(model => model.BankName)</dt>
				<dd>
					@Html.TextBoxFor(model => model.BankName) 
					@Html.ValidationMessageFor(model => model.BankName, null, new { @class = "ui-state-error ui-corner-all" }) 
				</dd>
				<dt>@Html.LabelFor(model => model.CheckType)</dt>
				<dd>
					@Html.EditorFor(model => model.CheckType) 
					@Html.ValidationMessageFor(model => model.CheckType, null, new { @class = "ui-state-error ui-corner-all" }) 
				</dd>
				<dt>@Html.LabelFor(model => model.CheckNumber)</dt>
				<dd>
					@Html.TextBoxFor(model => model.CheckNumber) 
					@Html.ValidationMessageFor(model => model.CheckNumber, null, new { @class = "ui-state-error ui-corner-all" }) 
				</dd>
			</dl>
        </fieldset>
        <fieldset class="column">
            <legend>Billing Information</legend>
            <dl>
			    <dt>@Html.LabelFor(model => model.FirstName)</dt>
			    <dd>
				    @Html.TextBoxFor(model => model.FirstName) 
				    @Html.ValidationMessageFor(model => model.FirstName, null, new { @class = "ui-state-error ui-corner-all" }) 
			    </dd>
			    <dt>@Html.LabelFor(model => model.LastName)</dt>
			    <dd>
				    @Html.TextBoxFor(model => model.LastName) 
				    @Html.ValidationMessageFor(model => model.LastName, null, new { @class = "ui-state-error ui-corner-all" }) 
			    </dd>
			    <dt>@Html.LabelFor(model => model.Email)</dt>
			    <dd>
				    @Html.TextBoxFor(model => model.Email) 
				    @Html.ValidationMessageFor(model => model.Email, null, new { @class = "ui-state-error ui-corner-all" }) 
			    </dd>
			    <dt>@Html.LabelFor(model => model.PrimaryPhone)</dt>
			    <dd>
				    @Html.TextBoxFor(model => model.PrimaryPhone) 
				    @Html.ValidationMessageFor(model => model.PrimaryPhone, null, new { @class = "ui-state-error ui-corner-all" }) 
			    </dd>
			    <dt>@Html.LabelFor(model => model.AddressLine1)</dt>
			    <dd>
				    @Html.TextBoxFor(model => model.AddressLine1) 
				    @Html.ValidationMessageFor(model => model.AddressLine1, null, new { @class = "ui-state-error ui-corner-all" })<br />
                    @Html.TextBoxFor(model => model.AddressLine2) 
			    </dd>
			    <dt>@Html.LabelFor(model => model.City)</dt>
			    <dd>
				    @Html.TextBoxFor(model => model.City) 
				    @Html.ValidationMessageFor(model => model.City, null, new { @class = "ui-state-error ui-corner-all" }) 
			    </dd>
			    <dt>@Html.LabelFor(model => model.State)</dt>
			    <dd>
				    @Html.EditorFor(model => model.State) 
				    @Html.ValidationMessageFor(model => model.State, null, new { @class = "ui-state-error ui-corner-all" }) 
			    </dd>
			    <dt>@Html.LabelFor(model => model.ZipCode)</dt>
			    <dd>
				    @Html.TextBoxFor(model => model.ZipCode) 
				    @Html.ValidationMessageFor(model => model.ZipCode, null, new { @class = "ui-state-error ui-corner-all" }) 
			    </dd>
            </dl>
		</fieldset>
		<div>
			@Html.UiSubmit("Submit")
			@Html.UiCancel()
		</div> 
	} 
</div>